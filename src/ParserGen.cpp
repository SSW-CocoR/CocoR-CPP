/*-------------------------------------------------------------------------
ParserGen -- Generation of the Recursive Descent Parser
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
ported to C++ by Csaba Balazs, University of Szeged
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include <ctype.h>
#include "ArrayList.h"
#include "ParserGen.h"
#include "Parser.h"
#include "BitArray.h"
#include "Scanner.h"
#include "Generator.h"

namespace Coco {

void ParserGen::Indent (int n) {
	for (int i = 1; i <= n; i++) fwprintf(gen, STRL("\t"));
}

// use a switch if more than 5 alternatives and none starts with a resolver, and no LL1 warning
bool ParserGen::UseSwitch (const Node *p) {
	BitArray *s2;
	if (p->typ != Node::alt) return false;
	int nAlts = 0;
	BitArray s1(tab->terminals.Count);
	while (p != NULL) {
		s2 = tab->Expected0(p->sub, curSy);
		// must not optimize with switch statement, if there are ll1 warnings
		if (s1.Overlaps(s2)) {delete s2; return false; }
		s1.Or(s2);
		delete s2;
		++nAlts;
		// must not optimize with switch-statement, if alt uses a resolver expression
		if (p->sub->typ == Node::rslv) return false;
		p = p->down;
	}
	return nAlts > 5;
}

int ParserGen::GenNamespaceOpen(const wchar_t *nsName) {
	if (nsName == NULL || coco_string_length(nsName) == 0) {
		return 0;
	}
	const int len = coco_string_length(nsName);
	int startPos = 0;
	int nrOfNs = 0;
	do {
		int curLen = coco_string_indexof(nsName + startPos, COCO_CPP_NAMESPACE_SEPARATOR);
		if (curLen == -1) { curLen = len - startPos; }
		wchar_t *curNs = coco_string_create(nsName, startPos, curLen);
		fwprintf(gen, STRL("namespace %ls {\n"), curNs);
		coco_string_delete(curNs);
		startPos = startPos + curLen + 1;
		if (startPos < len && nsName[startPos] == COCO_CPP_NAMESPACE_SEPARATOR) {
			++startPos;
		}
		++nrOfNs;
	} while (startPos < len);
	return nrOfNs;
}

void ParserGen::GenNamespaceClose(int nrOfNs) {
	for (int i = 0; i < nrOfNs; ++i) {
		fwprintf(gen, STRL("} // namespace\n"));
	}
}

void ParserGen::CopySourcePart (const Position *pos, int indent) {
	// Copy text described by pos from atg to gen
	int ch, i;
	if (pos != NULL) {
		buffer->SetPos(pos->beg); ch = buffer->Read();
		if (tab->emitLines && pos->line) {
			fwprintf(gen, STRL("\n#line %d \"%ls\"\n"), pos->line, tab->srcName);
		}
		Indent(indent);
		while (buffer->GetPos() <= pos->end) {
			while (ch == CR || ch == LF) {  // eol is either CR or CRLF or LF
				fwprintf(gen, STRL("\n")); Indent(indent);
				if (ch == CR) { ch = buffer->Read(); } // skip CR
				if (ch == LF) { ch = buffer->Read(); } // skip LF
				for (i = 1; i <= pos->col && (ch == ' ' || ch == '\t'); i++) {
					// skip blanks at beginning of line
					ch = buffer->Read();
				}
				if (buffer->GetPos() > pos->end) goto done;
			}
			fwprintf(gen, STRL("%lc"), ch);
			ch = buffer->Read();
		}
		done:
		if (indent > 0) fwprintf(gen, STRL("\n"));
	}
}

void ParserGen::GenErrorMsg (int errTyp, const Symbol *sym) {
	errorNr++;
	const int formatLen = 1000;
	wchar_t format[formatLen];
	coco_swprintf(format, formatLen, STRL("\t\t\tcase %d: s = STRL(\""), errorNr);
	coco_string_merge(err, format);
	if (errTyp == tErr) {
		if (sym->name[0] == CHL('"')) {
			wchar_t *se = tab->Escape(sym->name);
			coco_swprintf(format, formatLen, STRL("%ls expected"), se);
			coco_string_merge(err, format);
			coco_string_delete(se);
		} else {
			coco_swprintf(format, formatLen, STRL("%ls expected"), sym->name);
			coco_string_merge(err, format);
		}
	} else if (errTyp == altErr) {
		coco_swprintf(format, formatLen, STRL("invalid %ls"), sym->name);
		coco_string_merge(err, format);
	} else if (errTyp == syncErr) {
		coco_swprintf(format, formatLen, STRL("this symbol not expected in %ls"), sym->name);
		coco_string_merge(err, format);
	}
	coco_swprintf(format, formatLen, STRL("\"); break;\n"));
	coco_string_merge(err, format);
}

int ParserGen::NewCondSet (const BitArray *s) {
	for (int i = 1; i < symSet.Count; i++) // skip symSet[0] (reserved for union of SYNC sets)
		if (Sets::Equals(s, symSet[i])) return i;
	symSet.Add(s->Clone());
	return symSet.Count - 1;
}

void ParserGen::GenCond (const BitArray *s, const Node *p) {
	if (p->typ == Node::rslv) CopySourcePart(p->pos, 0);
	else {
		int n = Sets::Elements(s);
		if (n == 0) fwprintf(gen, STRL("false")); // happens if an ANY set matches no symbol
		else if (n <= maxTerm) {
			Symbol *sym;
			for (int i=0; i<tab->terminals.Count; i++) {
				sym = (Symbol*)tab->terminals[i];
				if ((*s)[sym->n]) {
					fwprintf(gen, STRL("la->kind == "));
					WriteSymbolOrCode(gen, sym);
					--n;
					if (n > 0) fwprintf(gen, STRL(" || "));
				}
			}
		} else
			fwprintf(gen, STRL("StartOf(%d /* %s */)"), NewCondSet(s), (tab->nTyp[p->typ]));
	}
}

void ParserGen::PutCaseLabels (const BitArray *s) {
	Symbol *sym;
	for (int i=0; i<tab->terminals.Count; i++) {
		sym = tab->terminals[i];
		if ((*s)[sym->n]) {
			fwprintf(gen, STRL("case "));
			WriteSymbolOrCode(gen, sym);
			fwprintf(gen, STRL(": "));
		}
	}
}

void ParserGen::GenCode (const Node *p, int indent, BitArray *isChecked) {
	const Node *p2;
	BitArray *s1, *s2;
	while (p != NULL) {
		if (p->typ == Node::nt) {
			Indent(indent);
			fwprintf(gen, STRL("%ls("), p->sym->name);
			CopySourcePart(p->pos, 0);
			fwprintf(gen, STRL(");\n"));
		} else if (p->typ == Node::t) {
			Indent(indent);
			// assert: if isChecked[p->sym->n] is true, then isChecked contains only p->sym->n
			if ((*isChecked)[p->sym->n]) {
				fwprintf(gen, STRL("Get();\n"));
				//copy and pasted bellow
				fwprintf(gen, STRL("#ifdef PARSER_WITH_AST\n\tAstAddTerminal();\n#endif\n"));
			}
			else {
				fwprintf(gen, STRL("Expect("));
				WriteSymbolOrCode(gen, p->sym);
				fwprintf(gen, STRL(");\n"));
				//copy and pasted from above
				fwprintf(gen, STRL("#ifdef PARSER_WITH_AST\n\tAstAddTerminal();\n#endif\n"));
			}
		} if (p->typ == Node::wt) {
			Indent(indent);
			s1 = tab->Expected(p->next, curSy);
			s1->Or(tab->allSyncSets);
			fwprintf(gen, STRL("ExpectWeak("));
			WriteSymbolOrCode(gen, p->sym);
			fwprintf(gen, STRL(", %d);\n"), NewCondSet(s1));
                        delete s1;
		} if (p->typ == Node::any) {
			Indent(indent);
			int acc = Sets::Elements(p->set);
			if (tab->terminals.Count == (acc + 1) || (acc > 0 && Sets::Equals(p->set, isChecked))) {
				// either this ANY accepts any terminal (the + 1 = end of file), or exactly what's allowed here
				fwprintf(gen, STRL("Get();\n"));
			} else {
				GenErrorMsg(altErr, curSy);
				if (acc > 0) {
					fwprintf(gen, STRL("if (")); GenCond(p->set, p); fwprintf(gen, STRL(") Get(); else SynErr(%d);\n"), errorNr);
				} else fwprintf(gen, STRL("SynErr(%d); // ANY node that matches no symbol\n"), errorNr);
			}
		} if (p->typ == Node::eps) {	// nothing
		} if (p->typ == Node::rslv) {	// nothing
		} if (p->typ == Node::sem) {
			CopySourcePart(p->pos, indent);
		} if (p->typ == Node::sync) {
			Indent(indent);
			GenErrorMsg(syncErr, curSy);
			s1 = p->set->Clone();
			fwprintf(gen, STRL("while (!(")); GenCond(s1, p); fwprintf(gen, STRL(")) {"));
			fwprintf(gen, STRL("SynErr(%d); Get();"), errorNr); fwprintf(gen, STRL("}\n"));
                        delete s1;
		} if (p->typ == Node::alt) {
			s1 = tab->First(p);
			bool equal = Sets::Equals(s1, isChecked);
                        delete s1;
			bool useSwitch = UseSwitch(p);
			if (useSwitch) { Indent(indent); fwprintf(gen, STRL("switch (la->kind) {\n")); }
			p2 = p;
			while (p2 != NULL) {
				s1 = tab->Expected(p2->sub, curSy);
				Indent(indent);
				if (useSwitch) {
					PutCaseLabels(s1); fwprintf(gen, STRL("{\n"));
				} else if (p2 == p) {
					fwprintf(gen, STRL("if (")); GenCond(s1, p2->sub); fwprintf(gen, STRL(") {\n"));
				} else if (p2->down == NULL && equal) { fwprintf(gen, STRL("} else {\n"));
				} else {
					fwprintf(gen, STRL("} else if ("));  GenCond(s1, p2->sub); fwprintf(gen, STRL(") {\n"));
				}
				GenCode(p2->sub, indent + 1, s1);
				if (useSwitch) {
					Indent(indent); fwprintf(gen, STRL("\tbreak;\n"));
					Indent(indent); fwprintf(gen, STRL("}\n"));
				}
				p2 = p2->down;
                                delete s1;
			}
			Indent(indent);
			if (equal) {
				fwprintf(gen, STRL("}\n"));
			} else {
				GenErrorMsg(altErr, curSy);
				if (useSwitch) {
					fwprintf(gen, STRL("default: SynErr(%d); break;\n"), errorNr);
					Indent(indent); fwprintf(gen, STRL("}\n"));
				} else {
					fwprintf(gen, STRL("} ")); fwprintf(gen, STRL("else SynErr(%d);\n"), errorNr);
				}
			}
		} if (p->typ == Node::iter) {
			Indent(indent);
			p2 = p->sub;
			fwprintf(gen, STRL("while ("));
			if (p2->typ == Node::wt) {
				s1 = tab->Expected(p2->next, curSy);
				s2 = tab->Expected(p->next, curSy);
				fwprintf(gen, STRL("WeakSeparator("));
				WriteSymbolOrCode(gen, p2->sym);
				fwprintf(gen, STRL(",%d,%d) "), NewCondSet(s1), NewCondSet(s2));
                                delete s1;
                                delete s2;
				s1 = new BitArray(tab->terminals.Count);  // for inner structure
				if (p2->up || p2->next == NULL) p2 = NULL; else p2 = p2->next;
			} else {
				s1 = tab->First(p2);
				GenCond(s1, p2);
			}
			fwprintf(gen, STRL(") {\n"));
			GenCode(p2, indent + 1, s1);
			Indent(indent); fwprintf(gen, STRL("}\n"));
                        delete s1;
		} if (p->typ == Node::opt) {
			s1 = tab->First(p->sub);
			Indent(indent);
			fwprintf(gen, STRL("if (")); GenCond(s1, p->sub); fwprintf(gen, STRL(") {\n"));
			GenCode(p->sub, indent + 1, s1);
			Indent(indent); fwprintf(gen, STRL("}\n"));
                        delete s1;
		}
		if (p->typ != Node::eps && p->typ != Node::sem && p->typ != Node::sync)
			isChecked->SetAll(false);  // = new BitArray(Symbol.terminals.Count);
		if (p->up) break;
		p = p->next;
	}
}


void ParserGen::GenTokensHeader() {
	Symbol *sym;
	int i;
	bool isFirst = true;

	fwprintf(gen, STRL("\tenum {\n"));

	// tokens
	for (i=0; i<tab->terminals.Count; i++) {
		sym = tab->terminals[i];
		if (!isalpha(sym->name[0])) { continue; }

		if (isFirst) { isFirst = false; }
		else { fwprintf(gen , STRL(",\n")); }

		fwprintf(gen , STRL("\t\t_%ls=%d"), sym->name, sym->n);
	}

	// pragmas
	for (i=0; i<tab->pragmas.Count; i++) {
		if (isFirst) { isFirst = false; }
		else { fwprintf(gen , STRL(",\n")); }

		sym = tab->pragmas[i];
		fwprintf(gen , STRL("\t\t_%ls=%d"), sym->name, sym->n);
	}

	fwprintf(gen, STRL("\n\t};\n"));

        // nonterminals
        fwprintf(gen, STRL("#ifdef PARSER_WITH_AST\n\tenum eNonTerminals{\n"));
        isFirst = true;
        for (i=0; i<tab->nonterminals.Count; i++) {
                sym = tab->nonterminals[i];
                if (isFirst) { isFirst = false; }
                else { fwprintf(gen , STRL(",\n")); }

                fwprintf(gen , STRL("\t\t_%ls=%d"), sym->name, sym->n);
        }
        fwprintf(gen, STRL("\n\t};\n#endif\n"));

}

void ParserGen::GenCodePragmas() {
	Symbol *sym;
	for (int i=0; i<tab->pragmas.Count; i++) {
		sym = tab->pragmas[i];
		fwprintf(gen, STRL("\t\tif (la->kind == "));
		WriteSymbolOrCode(gen, sym);
		fwprintf(gen, STRL(") {\n"));
		CopySourcePart(sym->semPos, 4);
		fwprintf(gen, STRL("\t\t}\n"));
	}
}

void ParserGen::WriteSymbolOrCode(FILE *gen, const Symbol *sym) {
	if (!isalpha(sym->name[0])) {
		fwprintf(gen, STRL("%d /* %ls */"), sym->n, sym->name);
	} else {
		fwprintf(gen, STRL("_%ls"), sym->name);
	}
}

void ParserGen::GenProductionsHeader() {
	Symbol *sym;
	for (int i=0; i<tab->nonterminals.Count; i++) {
		sym = tab->nonterminals[i];
		curSy = sym;
		fwprintf(gen, STRL("\tvoid %ls("), sym->name);
		CopySourcePart(sym->attrPos, 0);
		fwprintf(gen, STRL(");\n"));
	}
}

void ParserGen::GenProductions() {
	Symbol *sym;
        BitArray ba(tab->terminals.Count);
	for (int i=0; i<tab->nonterminals.Count; i++) {
		sym = tab->nonterminals[i];
		curSy = sym;
		fwprintf(gen, STRL("void Parser::%ls("), sym->name);
		CopySourcePart(sym->attrPos, 0);
		fwprintf(gen, STRL(") {\n"));
		CopySourcePart(sym->semPos, 2);
                fwprintf(gen, STRL("#ifdef PARSER_WITH_AST\n"));
                if(i == 0) fwprintf(gen, STRL("\t\tToken *ntTok = new Token(); ntTok->kind = eNonTerminals::_%ls; ntTok->line = 0; ntTok->val = coco_string_create(\"%ls\");ast_root = new SynTree( ntTok ); ast_stack.Clear(); ast_stack.Add(ast_root);\n"), sym->name, sym->name);
                else {
                        fwprintf(gen, STRL("\t\tbool ntAdded = AstAddNonTerminal(eNonTerminals::_%ls, \"%ls\", la->line);\n"), sym->name, sym->name);
                }
                fwprintf(gen, STRL("#endif\n"));
                ba.SetAll(false);
		GenCode(sym->graph, 2, &ba);
                fwprintf(gen, STRL("#ifdef PARSER_WITH_AST\n"));
                if(i == 0) fwprintf(gen, STRL("\t\tAstPopNonTerminal();\n"));
                else fwprintf(gen, STRL("\t\tif(ntAdded) AstPopNonTerminal();\n"));
                fwprintf(gen, STRL("#endif\n"));
		fwprintf(gen, STRL("}\n\n"));
	}
}

void ParserGen::InitSets() {
	fwprintf(gen, STRL("\tstatic bool set[%d][%d] = {\n"), symSet.Count, tab->terminals.Count+1);

	for (int i = 0; i < symSet.Count; i++) {
		BitArray *s = symSet[i];
		fwprintf(gen, STRL("\t\t{"));
		int j = 0;
		Symbol *sym;
		for (int k=0; k<tab->terminals.Count; k++) {
			sym = tab->terminals[k];
			if ((*s)[sym->n]) fwprintf(gen, STRL("T,")); else fwprintf(gen, STRL("x,"));
			++j;
			if (j%4 == 0) fwprintf(gen, STRL(" "));
		}
		if (i == symSet.Count-1) fwprintf(gen, STRL("x}\n")); else fwprintf(gen, STRL("x},\n"));
	}
	fwprintf(gen, STRL("\t};\n\n"));
}

void ParserGen::WriteParser () {
	Generator g(tab, errors);
	int oldPos = buffer->GetPos();  // Pos is modified by CopySourcePart
	symSet.Add(tab->allSyncSets);

	fram = g.OpenFrame(STRL("Parser.frame"));
	gen = g.OpenGen(STRL("Parser.h"));

	Symbol *sym;
	for (int i=0; i<tab->terminals.Count; i++) {
		sym = tab->terminals[i];
		GenErrorMsg(tErr, sym);
	}

	g.GenCopyright();
	g.SkipFramePart(STRL("-->begin"));

	g.CopyFramePart(STRL("-->prefix"));
	g.GenPrefixFromNamespace();

	g.CopyFramePart(STRL("-->prefix"));
	g.GenPrefixFromNamespace();

	g.CopyFramePart(STRL("-->headerdef"));

	if (usingPos != NULL) {CopySourcePart(usingPos, 0); fwprintf(gen, STRL("\n"));}
	g.CopyFramePart(STRL("-->namespace_open"));
	int nrOfNs = GenNamespaceOpen(tab->nsName);

	g.CopyFramePart(STRL("-->constantsheader"));
	GenTokensHeader();  /* ML 2002/09/07 write the token kinds */
	fwprintf(gen, STRL("\tint maxT;\n"));
	g.CopyFramePart(STRL("-->declarations")); CopySourcePart(tab->semDeclPos, 0);
	g.CopyFramePart(STRL("-->productionsheader")); GenProductionsHeader();
	g.CopyFramePart(STRL("-->namespace_close"));
	GenNamespaceClose(nrOfNs);

	g.CopyFramePart(STRL("-->implementation"));
	fclose(gen);

	// Source
	gen = g.OpenGen(STRL("Parser.cpp"));

	g.GenCopyright();
	g.SkipFramePart(STRL("-->begin"));
	g.CopyFramePart(STRL("-->namespace_open"));
	nrOfNs = GenNamespaceOpen(tab->nsName);

	g.CopyFramePart(STRL("-->pragmas")); GenCodePragmas();
	g.CopyFramePart(STRL("-->productions")); GenProductions();
	g.CopyFramePart(STRL("-->parseRoot")); fwprintf(gen, STRL("\t%ls();\n"), tab->gramSy->name); if (tab->checkEOF) fwprintf(gen, STRL("\tExpect(0);"));
	g.CopyFramePart(STRL("-->constants"));
	fwprintf(gen, STRL("\tmaxT = %d;\n"), tab->terminals.Count-1);
	g.CopyFramePart(STRL("-->initialization")); InitSets();
	g.CopyFramePart(STRL("-->errors")); fwprintf(gen, STRL("%ls"), err);
	g.CopyFramePart(STRL("-->namespace_close"));
	GenNamespaceClose(nrOfNs);
	g.CopyFramePart(NULL);
	fclose(gen);
	buffer->SetPos(oldPos);
}


void ParserGen::WriteStatistics () {
	fwprintf(trace, STRL("\n"));
	fwprintf(trace, STRL("%d terminals\n"), tab->terminals.Count);
	fwprintf(trace, STRL("%d symbols\n"), tab->terminals.Count + tab->pragmas.Count +
	                               tab->nonterminals.Count);
	fwprintf(trace, STRL("%d nodes\n"), tab->nodes.Count);
	fwprintf(trace, STRL("%d sets\n"), symSet.Count);
}


ParserGen::ParserGen (Parser *parser) {
	maxTerm = 3;
	CR = '\r';
	LF = '\n';
	tErr = 0;
	altErr = 1;
	syncErr = 2;
	tab = parser->tab;
	errors = &parser->errors;
	trace = parser->trace;
	buffer = parser->scanner->buffer;
	errorNr = -1;
	usingPos = NULL;

	err = NULL;
}

ParserGen::~ParserGen () {
    for(int i=0; i<symSet.Count; ++i) delete symSet[i];
    delete usingPos;
    coco_string_delete(err);
}

}; // namespace
